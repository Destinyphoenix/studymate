CREATE DATABASE if not exists studyMate;
use studyMate;

-- Create the USER table
CREATE TABLE USER (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL
);

-- Create the LOCATION table
CREATE TABLE LOCATION (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
    address VARCHAR(255),
    opening VARCHAR(50),
    creatorID INT,
    FOREIGN KEY (creatorID) REFERENCES USER(ID) ON DELETE SET NULL
);

-- Create the FRIENDLIST table
CREATE TABLE FRIENDLIST (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    userID INT NOT NULL,
    friendID INT NOT NULL,
    FOREIGN KEY (userID) REFERENCES USER(ID) ON DELETE CASCADE,
    FOREIGN KEY (friendID) REFERENCES USER(ID) ON DELETE CASCADE,
    UNIQUE(userID, friendID)  -- To avoid duplicate friend entries
);

-- Create the SESSION table
CREATE TABLE SESSION (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    locationID INT NOT NULL,
    creatorID INT NOT NULL,
    startTime DATETIME,
    endTime DATETIME,
    FOREIGN KEY (locationID) REFERENCES LOCATION(ID) ON DELETE CASCADE,
    FOREIGN KEY (creatorID) REFERENCES USER(ID) ON DELETE CASCADE
);

-- Create the SESSIONJOIN table
CREATE TABLE SESSIONJOIN (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    sessionID INT NOT NULL,
    userID INT NOT NULL,
    startTime DATETIME,
    endTime DATETIME,
    FOREIGN KEY (sessionID) REFERENCES SESSION(ID) ON DELETE CASCADE,
    FOREIGN KEY (userID) REFERENCES USER(ID) ON DELETE CASCADE
);

-- Create the LOCATIONLIST table
CREATE TABLE LOCATIONLIST (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    userID INT NOT NULL,
    locationID INT NOT NULL,
    FOREIGN KEY (userID) REFERENCES USER(ID) ON DELETE CASCADE,
    FOREIGN KEY (locationID) REFERENCES LOCATION(ID) ON DELETE CASCADE,
    UNIQUE(userID, locationID)  -- To avoid duplicate location entries
);
